package adflib

import (
	"fmt"
	"math/rand"
	"reflect"
	"testing"
)

/*
func TestFiltNLMS_Adapt(t *testing.T) {
	type fields struct {
		AdaptiveFilter AdaptiveFilter
		kind           string
		eps            float64
		wHistory       [][]float64
	}
	type args struct {
		d float64
		x []float64
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := &FiltNLMS{
				AdaptiveFilter: tt.fields.AdaptiveFilter,
				kind:           tt.fields.kind,
				eps:            tt.fields.eps,
				wHistory:       tt.fields.wHistory,
			}
		})
	}
}

*/

func TestFiltNLMS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = xRow
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	//type fields struct {
	//	AdaptiveFilter AdaptiveFilter
	//	kind           string
	//	eps            float64
	//	wHistory       [][]float64
	//}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run NLMS Filter",
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{-1.2740625158189787, 0.9040834831599331, -0.6415438287949211, 0.4552438927722767, -1.1985274316488954, 0.4807819560396975, -0.1121013502242531, 0.19223894512876732, -0.6553375059588319, 1.590045485456117, -0.2066408046003121, 0.666379534236579, 0.023943105862672703, 0.692351346847766, -0.7159142498967643, 1.2891026239290102, -0.21245075732923985, -0.8675626081523529, 0.7130931312324187, -1.1064101271605657, 0.8959046303170315, -0.43723200100345, 0.8089392175692209, -1.3329855459643414, 1.180271277839235, -1.6327949707000875, 1.8166598318654894, -0.5986423945988675, 0.786782625510322, -0.3798117999436102, 0.3878019286131726, -1.4379778299469523, 1.8394489991946965, -1.8520809259420377, 0.7634430964614641, 0.46609560622111257, -0.5652390138384463, 0.22579994750941662, 1.0713880521360344, -0.9063254601409345, -0.10313414362637577, -0.4075906522469115, -1.1027625735164681, 2.1917497890565913, -1.584472537629998, 1.9785287537370364, -1.9990487132922892, 0.4228944466739113, 0.3912692084140954, -1.69186704992982, 1.4710865127114685, -0.7532585366469238, 2.329991935061917, -2.5547511565309593, 1.5143885345488686, -1.0730872460346623, 2.4523640695157525, -1.6044905854862037, 1.145657970019422, -1.1381886730229969, 0.4695689143994204, 1.6048134600851127, -1.101553093069138, 1.3492673865528133},
			want1:   []float64{1.2740625158189787, -0.9040834831599331, 0.6415438287949211, -1.6890020703702238, 0.6775328604957451, -0.1579767034281176, 0.2709090904006887, -0.9235219613062464, 2.240741468239455, -0.2912046379386828, 0.9390827304048253, 0.033741368203405786, 0.9756830151485898, -1.0088885897418542, 1.816643443646785, -0.2993922037204786, -1.2225961648029884, 1.0049129817257036, -1.559187504688016, 1.2625366224433803, -0.61616091165386, 1.1399822625656313, -1.8784846199222414, 1.663274931577003, -2.3009853701958685, 2.5600934414641707, -0.8436254500223042, 1.1087585050848836, -0.5352425814511728, 0.5465025188619077, -2.026443006469607, 2.5922086436569893, -2.61000994704449, 1.0758677160682706, 0.656836400327416, -0.7965523686960821, 0.3182042970082103, 1.509833309145145, -1.2772219793928943, -0.1453398374630095, -0.5743894026367635, -1.554047258837997, 3.0886818554976, -2.232887897125584, 2.788204152116415, -2.8171215162563863, 0.595955984918624, 0.5513887172147103, -2.384231578405578, 2.0731007902297707, -1.061515318152019, 3.28349697999933, -3.6002346535574103, 2.1341233439096357, -1.512227865946231, 3.455947591466603, -2.261097951715145, 1.6144967834710426, -1.6039708182256613, 0.6617310940568079, 2.261552956625026, -1.5523428214378432, 1.9014294952227035, -0.623929898609102},
			want2:   [][]float64{{-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//af := &FiltNLMS{
			//	AdaptiveFilter: tt.fields.AdaptiveFilter,
			//	kind:           tt.fields.kind,
			//	eps:            tt.fields.eps,
			//	wHistory:       tt.fields.wHistory,
			//}
			af := Must(NewFiltNLMS(L, 1.0, 1e-5, "random"))
			got, got1, got2, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Run() got = %v\n, want %v\n", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("Run() got1 = %v\n, want %v\n", got1, tt.want1)
			}
			if !reflect.DeepEqual(got2, tt.want2) {
				t.Errorf("Run() got2 = %v\n, want %v\n", got2, tt.want2)
			}
		})
	}
}

/*
func TestNewFiltNLMS(t *testing.T) {
	type args struct {
		n   int
		mu  float64
		eps float64
		w   interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    ADFInterface
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltNLMS(tt.args.n, tt.args.mu, tt.args.eps, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltNLMS() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltNLMS() got = %v, want %v", got, tt.want)
			}
		})
	}
}

*/

func ExampleExploreLearning_nlms() {
	rand.Seed(1)
	//creation of data
	//number of samples
	//n := 64
	n := 512
	L := 8
	mu := 1.0
	eps := 0.001
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][L-1]
	}

	af, err := NewFiltNLMS(L, mu, eps, "zeros")
	checkError(err)
	es, mus, err := ExploreLearning(af, d, x, 0.00001, 2.0, 100, 0.5, 100, "MSE", nil)
	checkError(err)
	fmt.Println(es)
	fmt.Println(mus)
	//output:
	//[0.7203306953112067 0.746228471726759 0.8135441419692978 0.9430802101621759 1.2020047365934938 1.8198555192823938 3.8956716259167647 40.95783957259453 2.223406221042104e+06 2.2006478240062466e+12 4.405955182994235e+17 3.096823578640919e+22 8.987525123012353e+26 1.2085975836330368e+31 8.29693747300442e+34 3.1578972318258237e+38 7.147318996798162e+41 1.0207598847461715e+45 9.674029347043071e+47 6.350739012283184e+50 2.995888809972044e+53 1.0482050832064108e+56 2.795626478673092e+58 5.820773236648191e+60 9.660900762078585e+62 1.301872530987559e+65 1.447731830326365e+67 1.3478554622147156e+69 1.0642031132042517e+71 7.208401665707394e+72 4.232417507559305e+74 2.1743770703063854e+76 9.857232216516248e+77 3.973634285619438e+79 1.4344145024343974e+81 4.666516117092896e+82 1.3762126964425667e+84 3.699029628729022e+85 9.106423710125228e+86 2.0627513521184556e+88 4.31733554314725e+89 8.382046318677732e+90 1.515034839515726e+92 2.557970428753705e+93 4.0469702254360975e+94 6.017216172755693e+95 8.430982408877764e+96 1.1160588040621453e+98 1.3991413957365765e+99 1.664856457823614e+100 1.8842936346619185e+101 2.0325371250347427e+102 2.0934271193289075e+103 2.0623939413996435e+104 1.946712805686761e+105 1.763319216313186e+106 1.534985256472202e+107 1.285975905503966e+108 1.0382359371414394e+109 8.088042406578705e+109 6.086907981936152e+110 4.4304918487000273e+111 3.1223441514430074e+112 2.132712451687581e+113 1.4133001457532347e+114 9.094839073870533e+114 5.688573967540432e+115 3.46123644046119e+116 2.0503771744452835e+117 1.1834515635993647e+118 6.660493292189934e+118 3.657737947748988e+119 1.961404260398107e+120 1.027674746252565e+121 5.26444196242965e+121 2.638275177770883e+122 1.294230055784801e+123 6.218263945542931e+123 2.9276984984846487e+124 1.351473083771623e+125 6.119672241395129e+125 2.719546236573483e+126 1.1866220412721786e+127 5.085913054165692e+127 2.142160229262798e+128 8.87035114598139e+128 3.612505830198885e+129 1.4475121751014453e+130 5.708777662891254e+130 2.2168030406352267e+131 8.478612324981686e+131 3.195080155048042e+132 1.1866943948062785e+133 4.3454269310074743e+133 1.5692579555489915e+134 5.5905207529530416e+134 1.965304839619714e+135 6.819415746607394e+135 2.336254540108686e+136 7.904265439345076e+136]
	//[1e-05 0.02021191919191919 0.040413838383838385 0.06061575757575758 0.08081767676767676 0.10101959595959595 0.12122151515151515 0.14142343434343435 0.16162535353535354 0.18182727272727273 0.20202919191919191 0.2222311111111111 0.24243303030303032 0.2626349494949495 0.2828368686868687 0.30303878787878785 0.32324070707070707 0.3434426262626263 0.36364454545454544 0.38384646464646466 0.4040483838383838 0.42425030303030303 0.4444522222222222 0.4646541414141414 0.4848560606060606 0.5050579797979797 0.5252598989898989 0.5454618181818182 0.5656637373737373 0.5858656565656565 0.6060675757575756 0.6262694949494949 0.6464714141414141 0.6666733333333332 0.6868752525252525 0.7070771717171717 0.7272790909090908 0.74748101010101 0.7676829292929293 0.7878848484848484 0.8080867676767676 0.8282886868686868 0.848490606060606 0.8686925252525252 0.8888944444444443 0.9090963636363636 0.9292982828282828 0.9495002020202019 0.9697021212121212 0.9899040404040403 1.0101059595959596 1.0303078787878788 1.050509797979798 1.070711717171717 1.0909136363636365 1.1111155555555556 1.1313174747474748 1.151519393939394 1.1717213131313131 1.1919232323232323 1.2121251515151514 1.2323270707070708 1.25252898989899 1.2727309090909091 1.2929328282828283 1.3131347474747475 1.3333366666666666 1.3535385858585858 1.3737405050505052 1.3939424242424243 1.4141443434343435 1.4343462626262626 1.4545481818181818 1.474750101010101 1.4949520202020201 1.5151539393939395 1.5353558585858587 1.5555577777777778 1.575759696969697 1.5959616161616161 1.6161635353535353 1.6363654545454545 1.6565673737373738 1.676769292929293 1.6969712121212122 1.7171731313131313 1.7373750505050505 1.7575769696969696 1.7777788888888888 1.7979808080808082 1.8181827272727273 1.8383846464646465 1.8585865656565657 1.8787884848484848 1.898990404040404 1.9191923232323231 1.9393942424242425 1.9595961616161617 1.9797980808080808 2]
}
