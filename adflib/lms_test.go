package adflib

import (
	"math/rand"
	"reflect"
	"testing"
)

func init() {
	rand.Seed(1)
}

/*
func TestFiltLMS_Adapt(t *testing.T) {
	type fields struct {
		AdaptiveFilter AdaptiveFilter
		kind           string
		wHistory       [][]float64
	}
	type args struct {
		d float64
		x []float64
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := &FiltLMS{
				AdaptiveFilter: tt.fields.AdaptiveFilter,
				kind:           tt.fields.kind,
				wHistory:       tt.fields.wHistory,
			}
		})
	}
}

*/

func TestFiltLMS_Run(t *testing.T) {
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = xRow
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	//n := 100
	//x := NewNormRand2dSlice(n, 4)
	//v := NewNormRandSlice(n)
	//floats.Scale(2.0, x[0])
	//floats.Scale(0.1, x[1])
	//floats.Scale(1.0, x[2])
	//floats.Scale(0.5, x[3])
	//d := make([]float64, n)
	//for i := 0; i < 4; i++ {
	//	floats.Add(d, x[i])
	//}
	//floats.Add(d, v)

	//type fields struct {
	//	AdaptiveFilter AdaptiveFilter
	//	kind           string
	//	wHistory       [][]float64
	//}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run LMS Filter",
			//fields: fields{
			//	Must(NewFiltLMS(4, 1., "random")),
			//},
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{0.6233227262392695, -0.10107694662354907, 0.01639046469616134, -0.0026578497068838187, -0.02005730376262076, 0.3739007587355475, 0.03505319440480665, 0.1547231511937332, 0.08621269210268831, 0.12194193245823201, 0.06574163948068393, -0.18468555506221324, 0.09992457645017372, -0.2633275882024312, 0.34909303341736037, -0.21758986588881646, -0.0644795872680525, -0.33841739128880943, 0.12668454447003752, -0.03396884999404526, -0.2297222536016389, -0.24472671822741635, 0.09581375690718226, -0.1506556985470852, 0.3075165620841163, 0.072854845650272, -0.24783634872649457, -0.0076826227202499275, -0.07531509596636377, -0.0010738730894123787, 0.05920707086981633, 0.12590963344071265, -0.03258505641837846, -0.17686735153247135, 0.1376417588839774, -0.08212023620187092, 0.0029328183192855453, 0.026969863917728515, -0.047864505899483156, 0.20299345868253627, -0.11340391642601344, -0.28923180631773177, -0.07235708356001413, 0.02710900665945718, -0.03325563011983268, -0.15788272622757551, 0.04204824524299492, -0.38406835570083286, 0.1022691039627342, 0.0840907916066977, -0.1725681185098069, 0.12058905933677441, 0.040609788344156315, -0.35989749951825173, -0.08069064135195726, -0.18028481469876045, 0.269077076502885, -0.0431817661077607, -0.004642710086782828, -0.35063183389833, -0.03351444180062073, -0.23069366002680164, -0.06289575998529427, -0.1365556436393371},
			want1:   []float64{-0.6233227262392695, 0.10107694662354907, -0.01639046469616134, -0.12368966099548911, 2.305776421462201, 0.21616652886414622, 0.9541488898907751, 0.5316576338422394, 0.7519932123181222, 0.4054164606016296, -1.1389214605694364, 0.6162162737582664, -1.623892248978067, 2.1527917944659127, -1.341836224168797, -0.3976336193889485, -2.086957095474592, 0.781240018315376, -0.2094795786061867, -1.4166544021764258, -1.5091841442068534, 0.5908656143823121, -0.9290656660969224, 1.8963974303250326, 0.44928227976258, -1.5283606570026074, -0.04737730509894772, -0.464454185775618, -0.006622375567205352, 0.3651189916199679, 0.7764612861560972, -0.20094598105550587, -1.090708053840777, 0.8488111212091193, -0.5064202196313399, 0.01808614497576866, 0.1663181335118013, -0.29517150353264066, 1.251822896332503, -0.6993408557951447, -1.7836387430709537, -0.44621267355184185, 0.16717620091498211, -0.20508128432393105, -0.9736334013411169, 0.25930370607707526, -2.36847810044453, 0.6306745387701193, 0.5185722682257321, -1.0641954835866936, 0.7436502954563429, 0.2504330099815437, -2.2194209269292227, -0.4976041741429001, -1.1117829134283668, 1.65934827373579, -0.26629391837846556, -0.028630729410634978, -2.162281290765288, -0.20667732781198983, -1.4226448848873245, -0.38786645117938784, -0.842113250548061, 0.5000072126932158},
			want2:   [][]float64{{0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}, {0.054518521797481734, -0.09310441777300832, 0.02152208529042468, -0.00763678956156349}},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//af := &FiltLMS{
			//	AdaptiveFilter: tt.fields.AdaptiveFilter,
			//	kind:           tt.fields.kind,
			//	wHistory:       tt.fields.wHistory,
			//}
			af := Must(NewFiltLMS(L, 0.3, "random"))
			y, e, wHist, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(y, tt.want) {
				t.Errorf("Run() y = %v, want %v", y, tt.want)
			}
			if !reflect.DeepEqual(e, tt.want1) {
				t.Errorf("Run() e = %v, want %v", e, tt.want1)
			}
			if !reflect.DeepEqual(wHist, tt.want2) {
				t.Errorf("Run() wHist = %v, want %v", wHist, tt.want2)
			}
		})
	}
}

/*
func TestNewFiltLMS(t *testing.T) {
	type args struct {
		n  int
		mu float64
		w  interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    *FiltLMS
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltLMS(tt.args.n, tt.args.mu, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltLMS() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltLMS() got = %v, want %v", got, tt.want)
			}
		})
	}
}
*/
