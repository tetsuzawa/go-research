package adflib

import (
	"fmt"
	"github.com/gonum/floats"
	"math/rand"
	"reflect"
	"testing"
)

func init() {
	rand.Seed(1)
}

/*
func TestFiltLMS_Adapt(t *testing.T) {
	type fields struct {
		AdaptiveFilter AdaptiveFilter
		kind           string
		wHistory       [][]float64
	}
	type args struct {
		d float64
		x []float64
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := &FiltLMS{
				AdaptiveFilter: tt.fields.AdaptiveFilter,
				kind:           tt.fields.kind,
				wHistory:       tt.fields.wHistory,
			}
		})
	}
}

*/

func TestFiltLMS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	//n := 100
	//x := NewNormRand2dSlice(n, 4)
	//v := NewNormRandSlice(n)
	//floats.Scale(2.0, x[0])
	//floats.Scale(0.1, x[1])
	//floats.Scale(1.0, x[2])
	//floats.Scale(0.5, x[3])
	//d := make([]float64, n)
	//for i := 0; i < 4; i++ {
	//	floats.Add(d, x[i])
	//}
	//floats.Add(d, v)

	//type fields struct {
	//	AdaptiveFilter AdaptiveFilter
	//	kind           string
	//	wHistory       [][]float64
	//}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run LMS Filter",
			//fields: fields{
			//	Must(NewFiltLMS(4, 1., "random")),
			//},
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{-0.3916108209122005, 0.02517201175116697, -0.0011946675252372278, 6.282344369003245e-05, -0.050553606725125724, 0.06550552681701775, 0.021482957680639365, 0.023825856946074156, -0.17850258990675139, 0.7449277166477791, 0.10233897599940284, 0.03451807066506019, 0.07484182106500023, -0.09208247618656638, 0.01967130002473734, -0.06964103045492476, -0.19764259109217808, 0.04971122816940757, -7.049473447647285e-05, 0.05443788724030692, -0.008792174266645407, -0.036887952097698684, -0.18596570043120553, 0.07601989584237587, -0.0002731521650133281, -0.054647487086015425, 0.15405728806876284, 0.03222333142582892, -0.09530483145899225, -0.10446940191101409, -0.06659155364404744, 0.5164332558236504, -0.11882591200915478, 0.05813651132303767, 0.16010403954977148, -0.14790938322156505, 0.0089066908762774, -0.0036595147627036095, 0.33060478125947507, 0.08784732508624611, 0.22058316581077722, 0.2422925652709415, 1.109968012798729, 0.0031504974861261414, 0.005533179559006316, -0.37641841400235376, 0.1336552938660423, 0.6012313714647397, -0.05629497193624801, 0.5386542735085826, 0.0234125640400936, -0.06349658871831301, -0.6939480518972886, -0.05730095552909236, -0.016782577218502195, 0.0008680494176780235, 0.15994005302678527, -0.003400661129244653, -0.0012658479453711423, 0.041025605948545804, 0.027727247894811992, -0.01648474918329282, 0.006566799232738431, 0.2380677592855663,},
			want1:   []float64{0.3916108209122005, -0.02517201175116697, 0.0011946675252372278, -1.233821001041637, -0.4704409644280246, 0.2572997257945621, 0.13732478249579624, -0.7551088731235532, 1.7639065521873745, 0.5539131308696551, 0.6301029498051103, 0.6656028317749246, 0.9247842999462622, -0.22445476670752185, 1.0810578937252835, 1.0593514506634563, -1.2374043310400502, 0.08763914540394321, -0.8460238787211206, 0.10168860804250772, 0.2885358929298169, 0.7396382136598799, -0.8835797019218149, 0.25426948977028585, -1.12044094019162, 0.9819459578500986, 0.8189770937744224, 0.47789277906018723, 0.34684487551814147, 0.2711601208293116, -1.572049524212387, 0.6377975578863868, -0.651735035840639, -0.8343497211968047, 1.2601754572391086, -0.18254737925340453, -0.2559414077065134, 1.7392927714172652, -0.5364387085163349, -1.1395126226901902, -0.8981067120739165, -2.20393047635585, 0.8759512691824032, -0.044288605555118626, 1.1981984349274108, -0.46217434851699635, -1.5367480222397074, 0.37305179242388187, -1.9366673980552345, -0.15742053320863214, 0.38615863051935606, 2.5937350320707195, -0.5762946665982046, -0.3633268570922311, 0.018943245821139834, 2.3819922960142628, 0.03132606477382238, 0.01340685911408358, -0.4570470002608681, -0.5174831849147348, 2.7033946231296344, 0.0689553878305624, 0.7933096029208272, 0.487269728658145,},
			want2:   [][]float64{{0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,}, {0.035343500093591274, -0.055518337388067995, -0.04946390404180482, -0.10035036453144873,},},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//af := &FiltLMS{
			//	AdaptiveFilter: tt.fields.AdaptiveFilter,
			//	kind:           tt.fields.kind,
			//	wHistory:       tt.fields.wHistory,
			//}
			af := Must(NewFiltLMS(L, 0.1, "random"))
			y, e, wHist, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(y, tt.want) {
				t.Errorf("Run() y = %v, want %v", y, tt.want)
				for _, v := range y {
					fmt.Printf("%g, ", v)
				}
				fmt.Printf("\n")
			}
			if !reflect.DeepEqual(e, tt.want1) {
				t.Errorf("Run() e = %v, want %v", e, tt.want1)
				for _, v := range e {
					fmt.Printf("%g, ", v)
				}
				fmt.Printf("\n")
			}
			if !reflect.DeepEqual(wHist, tt.want2) {
				t.Errorf("Run() wHist = %v, want %v", wHist, tt.want2)
				for _, v := range wHist {
					fmt.Printf("{")
					for _, vv := range v {
						fmt.Printf("%g, ", vv)
					}
					fmt.Printf("}, ")
				}
				fmt.Printf("\n")
			}
		})
	}
}

/*
func TestNewFiltLMS(t *testing.T) {
	type args struct {
		n  int
		mu float64
		w  interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    *FiltLMS
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltLMS(tt.args.n, tt.args.mu, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltLMS() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltLMS() got = %v, want %v", got, tt.want)
			}
		})
	}
}
*/

func ExampleExploreLearning_lms() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	mu := 0.1
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}

	af, err := NewFiltLMS(L, mu, "zeros")
	checkError(err)
	es, mus, err := ExploreLearning(af, d, x, 0.00001, 2.0, 100, 0.5, 100, "MSE", nil)
	checkError(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 0.182
}
