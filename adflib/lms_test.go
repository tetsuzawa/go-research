package adflib

import (
	"fmt"
	"log"
	"math/rand"
	"reflect"
	"testing"
)

func init() {
	rand.Seed(1)
}

/*
func TestFiltLMS_Adapt(t *testing.T) {
	type fields struct {
		AdaptiveFilter AdaptiveFilter
		kind           string
		wHistory       [][]float64
	}
	type args struct {
		d float64
		x []float64
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := &FiltLMS{
				AdaptiveFilter: tt.fields.AdaptiveFilter,
				kind:           tt.fields.kind,
				wHistory:       tt.fields.wHistory,
			}
		})
	}
}

*/

func TestFiltLMS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = xRow
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	//n := 100
	//x := NewNormRand2dSlice(n, 4)
	//v := NewNormRandSlice(n)
	//floats.Scale(2.0, x[0])
	//floats.Scale(0.1, x[1])
	//floats.Scale(1.0, x[2])
	//floats.Scale(0.5, x[3])
	//d := make([]float64, n)
	//for i := 0; i < 4; i++ {
	//	floats.Add(d, x[i])
	//}
	//floats.Add(d, v)

	//type fields struct {
	//	AdaptiveFilter AdaptiveFilter
	//	kind           string
	//	wHistory       [][]float64
	//}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run LMS Filter",
			//fields: fields{
			//	Must(NewFiltLMS(4, 1., "random")),
			//},
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{-1.2740625158189787, 0.9040834831599331, -0.6415438287949211, 0.4552438927722767, -1.1985274316488954, 0.4807819560396975, -0.1121013502242531, 0.19223894512876732, -0.6553375059588319, 1.590045485456117, -0.2066408046003121, 0.666379534236579, 0.023943105862672703, 0.692351346847766, -0.7159142498967643, 1.2891026239290102, -0.21245075732923985, -0.8675626081523529, 0.7130931312324187, -1.1064101271605657, 0.8959046303170315, -0.43723200100345, 0.8089392175692209, -1.3329855459643414, 1.180271277839235, -1.6327949707000875, 1.8166598318654894, -0.5986423945988675, 0.786782625510322, -0.3798117999436102, 0.3878019286131726, -1.4379778299469523, 1.8394489991946965, -1.8520809259420377, 0.7634430964614641, 0.46609560622111257, -0.5652390138384463, 0.22579994750941662, 1.0713880521360344, -0.9063254601409345, -0.10313414362637577, -0.4075906522469115, -1.1027625735164681, 2.1917497890565913, -1.584472537629998, 1.9785287537370364, -1.9990487132922892, 0.4228944466739113, 0.3912692084140954, -1.69186704992982, 1.4710865127114685, -0.7532585366469238, 2.329991935061917, -2.5547511565309593, 1.5143885345488686, -1.0730872460346623, 2.4523640695157525, -1.6044905854862037, 1.145657970019422, -1.1381886730229969, 0.4695689143994204, 1.6048134600851127, -1.101553093069138, 1.3492673865528133},
			want1:   []float64{1.2740625158189787, -0.9040834831599331, 0.6415438287949211, -1.6890020703702238, 0.6775328604957451, -0.1579767034281176, 0.2709090904006887, -0.9235219613062464, 2.240741468239455, -0.2912046379386828, 0.9390827304048253, 0.033741368203405786, 0.9756830151485898, -1.0088885897418542, 1.816643443646785, -0.2993922037204786, -1.2225961648029884, 1.0049129817257036, -1.559187504688016, 1.2625366224433803, -0.61616091165386, 1.1399822625656313, -1.8784846199222414, 1.663274931577003, -2.3009853701958685, 2.5600934414641707, -0.8436254500223042, 1.1087585050848836, -0.5352425814511728, 0.5465025188619077, -2.026443006469607, 2.5922086436569893, -2.61000994704449, 1.0758677160682706, 0.656836400327416, -0.7965523686960821, 0.3182042970082103, 1.509833309145145, -1.2772219793928943, -0.1453398374630095, -0.5743894026367635, -1.554047258837997, 3.0886818554976, -2.232887897125584, 2.788204152116415, -2.8171215162563863, 0.595955984918624, 0.5513887172147103, -2.384231578405578, 2.0731007902297707, -1.061515318152019, 3.28349697999933, -3.6002346535574103, 2.1341233439096357, -1.512227865946231, 3.455947591466603, -2.261097951715145, 1.6144967834710426, -1.6039708182256613, 0.6617310940568079, 2.261552956625026, -1.5523428214378432, 1.9014294952227035, -0.623929898609102},
			want2:   [][]float64{{-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}, {-0.04525597453101005, 0.07108906747167405, 0.06333660151350293, 0.128494731121333,}},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//af := &FiltLMS{
			//	AdaptiveFilter: tt.fields.AdaptiveFilter,
			//	kind:           tt.fields.kind,
			//	wHistory:       tt.fields.wHistory,
			//}
			af := Must(NewFiltLMS(L, 0.1, "random"))
			y, e, wHist, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(y, tt.want) {
				t.Errorf("Run() y = %v, want %v", y, tt.want)
				//for _, v := range y {
				//	fmt.Printf("%g, ", v)
				//}
			}
			if !reflect.DeepEqual(e, tt.want1) {
				t.Errorf("Run() e = %v, want %v", e, tt.want1)
			}
			if !reflect.DeepEqual(wHist, tt.want2) {
				t.Errorf("Run() wHist = %v, want %v", wHist, tt.want2)
				for _, v := range wHist {
					fmt.Printf("{")
					for _, vv := range v {
						fmt.Printf("%g, ", vv)
					}
					fmt.Printf("},")
				}
			}
		})
	}
}

/*
func TestNewFiltLMS(t *testing.T) {
	type args struct {
		n  int
		mu float64
		w  interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    *FiltLMS
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltLMS(tt.args.n, tt.args.mu, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltLMS() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltLMS() got = %v, want %v", got, tt.want)
			}
		})
	}
}
*/

func ExampleExploreLearning_lms() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	mu := 0.1
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = xRow
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}

	af, err := NewFiltLMS(L, mu, "random")
	checkError(err)
	es, mus, err := ExploreLearning(af, d, x, 0.00001, 1.0, 100, 0.5, 1, "MSE", nil)
	checkError(err)
	fmt.Println(es)
	fmt.Println(mus)
	//output:
	//[4 6 7 7]
	//[4 6 7 7]
}

func checkError(err error) {
	if err != nil {
		log.Fatalln(err)
	}
}
