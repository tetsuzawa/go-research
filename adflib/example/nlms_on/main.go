package main

import (
	"fmt"
	"github.com/tetsuzawa/go-research/adflib"
	"log"
	"math/rand"
	"os"
	"sort"
)

func init() {
	rand.Seed(1)
}

func unset(s []float64, i int) []float64 {
	if i >= len(s) {
		return s
	}
	return append(s[:i], s[i+1:]...)
}

const (
	//step size of filter
	mu = 1
	//length of filter
	L = 8
	//eps
	eps = 0.001
)

func main() {
	ExploreLearning_nlms()
}

func m() {
	//creation of data
	//number of samples
	n := 512
	//input value
	var x = make([]float64, L)
	//noise
	var v float64
	//desired value
	var d float64
	//output value
	var y float64
	//error
	var e float64
	var dBuf = make([]float64, 0)
	var yBuf = make([]float64, 0)
	var eBuf = make([]float64, 0)

	f, err := adflib.NewFiltNLMS(L, mu, eps, "zeros")
	//identification
	if err != nil {
		log.Fatalln(err)
	}

	for i := 0; i < n; i++ {
		x = unset(x, 0)
		x = append(x, rand.NormFloat64())
		v = 0.1 * rand.NormFloat64()
		d = x[L-1] + v
		f.Adapt(d, x)
		y = f.Predict(x)
		e = d - y
		dBuf = append(dBuf, d)
		yBuf = append(yBuf, y)
		eBuf = append(eBuf, e)
	}

	name := fmt.Sprintf("nlms_ex_on_mu-%v_L-%v.csv", mu, L)
	fw, err := os.Create(name)
	if err != nil {
		log.Fatalln(err)
	}
	defer fw.Close()
	for i := 0; i < n; i++ {
		_, err = fw.Write([]byte(fmt.Sprintf("%f,%f,%f\n", dBuf[i], yBuf[i], eBuf[i])))
		if err != nil {
			log.Fatalln(err)
		}
	}
}

func ExploreLearning_nlms() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	mu := 1.0
	eps := 1e-5
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = adflib.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][L-1]
	}

	af, err := adflib.NewFiltNLMS(L, mu, eps, "zeros")
	checkError(err)
	es, mus, err := adflib.ExploreLearning(af, d, x, 0.00001, 2.0, 100, 0.5, 100, "MSE", nil)
	checkError(err)
	res := make(map[float64]float64, len(es))
	for i:=0;i<n;i++{
		res[es[i]] = mus[i]
	}
	sort.Float64s(es)
	for _, k := range es {
		fmt.Println(k, res[k])
	}
	//fmt.Println(es)
	//fmt.Println(mus)
	//output:
	//[0.7203306953112067 0.746228471726759 0.8135441419692978 0.9430802101621759 1.2020047365934938 1.8198555192823938 3.8956716259167647 40.95783957259453 2.223406221042104e+06 2.2006478240062466e+12 4.405955182994235e+17 3.096823578640919e+22 8.987525123012353e+26 1.2085975836330368e+31 8.29693747300442e+34 3.1578972318258237e+38 7.147318996798162e+41 1.0207598847461715e+45 9.674029347043071e+47 6.350739012283184e+50 2.995888809972044e+53 1.0482050832064108e+56 2.795626478673092e+58 5.820773236648191e+60 9.660900762078585e+62 1.301872530987559e+65 1.447731830326365e+67 1.3478554622147156e+69 1.0642031132042517e+71 7.208401665707394e+72 4.232417507559305e+74 2.1743770703063854e+76 9.857232216516248e+77 3.973634285619438e+79 1.4344145024343974e+81 4.666516117092896e+82 1.3762126964425667e+84 3.699029628729022e+85 9.106423710125228e+86 2.0627513521184556e+88 4.31733554314725e+89 8.382046318677732e+90 1.515034839515726e+92 2.557970428753705e+93 4.0469702254360975e+94 6.017216172755693e+95 8.430982408877764e+96 1.1160588040621453e+98 1.3991413957365765e+99 1.664856457823614e+100 1.8842936346619185e+101 2.0325371250347427e+102 2.0934271193289075e+103 2.0623939413996435e+104 1.946712805686761e+105 1.763319216313186e+106 1.534985256472202e+107 1.285975905503966e+108 1.0382359371414394e+109 8.088042406578705e+109 6.086907981936152e+110 4.4304918487000273e+111 3.1223441514430074e+112 2.132712451687581e+113 1.4133001457532347e+114 9.094839073870533e+114 5.688573967540432e+115 3.46123644046119e+116 2.0503771744452835e+117 1.1834515635993647e+118 6.660493292189934e+118 3.657737947748988e+119 1.961404260398107e+120 1.027674746252565e+121 5.26444196242965e+121 2.638275177770883e+122 1.294230055784801e+123 6.218263945542931e+123 2.9276984984846487e+124 1.351473083771623e+125 6.119672241395129e+125 2.719546236573483e+126 1.1866220412721786e+127 5.085913054165692e+127 2.142160229262798e+128 8.87035114598139e+128 3.612505830198885e+129 1.4475121751014453e+130 5.708777662891254e+130 2.2168030406352267e+131 8.478612324981686e+131 3.195080155048042e+132 1.1866943948062785e+133 4.3454269310074743e+133 1.5692579555489915e+134 5.5905207529530416e+134 1.965304839619714e+135 6.819415746607394e+135 2.336254540108686e+136 7.904265439345076e+136]
	//[1e-05 0.02021191919191919 0.040413838383838385 0.06061575757575758 0.08081767676767676 0.10101959595959595 0.12122151515151515 0.14142343434343435 0.16162535353535354 0.18182727272727273 0.20202919191919191 0.2222311111111111 0.24243303030303032 0.2626349494949495 0.2828368686868687 0.30303878787878785 0.32324070707070707 0.3434426262626263 0.36364454545454544 0.38384646464646466 0.4040483838383838 0.42425030303030303 0.4444522222222222 0.4646541414141414 0.4848560606060606 0.5050579797979797 0.5252598989898989 0.5454618181818182 0.5656637373737373 0.5858656565656565 0.6060675757575756 0.6262694949494949 0.6464714141414141 0.6666733333333332 0.6868752525252525 0.7070771717171717 0.7272790909090908 0.74748101010101 0.7676829292929293 0.7878848484848484 0.8080867676767676 0.8282886868686868 0.848490606060606 0.8686925252525252 0.8888944444444443 0.9090963636363636 0.9292982828282828 0.9495002020202019 0.9697021212121212 0.9899040404040403 1.0101059595959596 1.0303078787878788 1.050509797979798 1.070711717171717 1.0909136363636365 1.1111155555555556 1.1313174747474748 1.151519393939394 1.1717213131313131 1.1919232323232323 1.2121251515151514 1.2323270707070708 1.25252898989899 1.2727309090909091 1.2929328282828283 1.3131347474747475 1.3333366666666666 1.3535385858585858 1.3737405050505052 1.3939424242424243 1.4141443434343435 1.4343462626262626 1.4545481818181818 1.474750101010101 1.4949520202020201 1.5151539393939395 1.5353558585858587 1.5555577777777778 1.575759696969697 1.5959616161616161 1.6161635353535353 1.6363654545454545 1.6565673737373738 1.676769292929293 1.6969712121212122 1.7171731313131313 1.7373750505050505 1.7575769696969696 1.7777788888888888 1.7979808080808082 1.8181827272727273 1.8383846464646465 1.8585865656565657 1.8787884848484848 1.898990404040404 1.9191923232323231 1.9393942424242425 1.9595961616161617 1.9797980808080808 2]
}

func checkError(err error) {
	if err != nil {
		log.Fatalln(err)
	}
}
